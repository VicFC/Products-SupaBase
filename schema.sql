-- DDL =======================================================================================================
create table public.countries (
  created_at timestamp with time zone not null default now(),
  code text not null default ''::text,
  name text not null default ''::text,
  constraint countries_pkey primary key (code)
) TABLESPACE pg_default;

create table public.categories (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  name text not null default ''::text,
  constraint categories_pkey primary key (id),
  constraint categories_id_key unique (id),
  constraint categories_name_key unique (name)
) TABLESPACE pg_default;

create table public.products (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  name text not null,
  category_id bigint null,
  unit_price numeric(12, 2) not null,
  constraint products_pkey primary key (id),
  constraint products_category_id_fkey foreign KEY (category_id) references categories (id),
  constraint products_unit_price_nonneg check ((unit_price >= (0)::numeric))
) TABLESPACE pg_default;

create table public.customers (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  name text not null,
  email text null,
  country_code text not null,
  constraint customers_pkey primary key (id),
  constraint customers_country_code_fkey foreign KEY (country_code) references countries (code)
) TABLESPACE pg_default;

create table public.invoices (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  costumer_id bigint null,
  invoice_date date not null default CURRENT_DATE,
  total_amount numeric(14, 2) not null,
  constraint invoices_pkey primary key (id),
  constraint invoices_costumer_id_fkey foreign KEY (costumer_id) references costumers (id)
) TABLESPACE pg_default;

create table public.invoice_lines (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  invoice_id bigint null,
  product_id bigint null,
  quantity numeric(12, 2) not null,
  unit_price numeric(12, 2) not null,
  line_total numeric(14, 2) not null,
  constraint invoice_lines_pkey primary key (id),
  constraint invoice_lines_invoices_id_fkey foreign KEY (invoice_id) references invoices (id)  on delete cascade,
  constraint invoice_lines_products_id_fkey foreign KEY (product_id) references products (id),
  constraint invoice_lines_quantity_nonneg check ((quantity > (0)::numeric)),
  constraint invoice_lines_unit_price_nonneg check ((unit_price >= (0)::numeric)),
  constraint invoice_lines_line_total_nonneg check ((line_total >= (0)::numeric)),
  constraint invoice_lines_line_total_check check ((line_total = (quantity * unit_price)))
) TABLESPACE pg_default;

-- Carga de datos =======================================================================================================

-- 1) Countries
insert into public.countries (code, name) values
  ('CR', 'Costa Rica'),
  ('US', 'United States'),
  ('MX', 'Mexico'),
  ('BR', 'Brazil'),
  ('AR', 'Argentina');

-- 2) Categories (IDs explícitos para referenciarlos luego)
insert into public.categories ( name) values
  ( 'Electronics'),
  ( 'Furniture'),
  ( 'Office'),
  ( 'Grocery'),
  ( 'Toys');

-- 3) Products (IDs e importes coherentes con numeric(12,2) y check >= 0)
insert into public.products ( name, category_id, unit_price) values
  ( 'USB-C Cable 1m',           1,  8.99),
  ( 'Desk LED Lamp',            1, 19.50),
  ( 'Ergonomic Chair Alpha',    2,159.99),
  ( 'A4 Paper (500 sheets)',    3,  5.50),
  ( 'Building Blocks Set',      5, 29.90);

-- 4) Costumers (clientes) — usan country_code que referencia countries(code)
insert into public.costumers ( name, email, country_code) values
  ( 'Acme S.A.',         'ventas@acme.cr',        'CR'),
  ( 'Northwind LLC',     'contact@northwind.us',  'US'),
  ( 'Ferretería México', 'admin@ferremx.mx',      'MX'),
  ( 'Brasil Market',     'compras@brmarket.br',   'BR'),
  ( 'Distribuidora Sur', 'info@distsur.ar',       'AR');

-- 5) Invoices (facturas)
-- total_amount se definió NOT NULL (sin default), así que lo ponemos explícito.
-- Pondremos un total por cada factura que coincidirá con sus líneas (abajo).
insert into public.invoices ( costumer_id, invoice_date, total_amount) values
  ( 1, current_date,  17.98),   -- coincidirá con 2 x 8.99
  ( 2, current_date,  19.50),   -- 1 x 19.50
  ( 3, current_date, 159.99),   -- 1 x 159.99
  ( 4, current_date,  16.50),   -- 3 x 5.50
  ( 5, current_date,  59.80);   -- 2 x 29.90

-- 6) Invoice Lines (detalle) — 5 líneas, una por cada invoice de arriba
-- Asegúrate de que line_total = quantity * unit_price para pasar los CHECKs
insert into public.invoice_lines ( invoice_id, product_id, quantity, unit_price, line_total) values
  ( 1, 1, 2.00,  8.99,  17.98),   -- Inv 1: 2 cables
  ( 2, 2, 1.00, 19.50,  19.50),   -- Inv 2: 1 lámpara
  ( 3, 3, 1.00,159.99, 159.99),   -- Inv 3: 1 silla
  ( 4, 4, 3.00,  5.50,  16.50),   -- Inv 4: 3 resmas
  ( 5, 5, 2.00, 29.90,  59.80);   -- Inv 5: 2 sets de bloques

-- RLS =======================================================================================================

-- productos por categoría permitida al usuario
create policy "products_by_user_category_select"
on public.products for select
to authenticated
using (exists (
 select 1 from public.user_allowed_category u
 where u.user_id = auth.uid() and u.category_id = products.category_id
));
create policy "products_by_user_category_insert"
on public.products for insert
to authenticated
with check (exists (
 select 1 from public.user_allowed_category u
 where u.user_id = auth.uid() and u.category_id = products.category_id
));
create policy "products_by_user_category_update"
on public.products for update
to authenticated
using (exists (
 select 1 from public.user_allowed_category u
 where u.user_id = auth.uid() and u.category_id = products.category_id
))
with check (exists (
 select 1 from public.user_allowed_category u
 where u.user_id = auth.uid() and u.category_id = products.category_id
));
create policy "products_by_user_category_delete"
on public.products for delete
to authenticated
using (exists (
 select 1 from public.user_allowed_category u
 where u.user_id = auth.uid() and u.category_id = products.category_id
));

-- customers por país permitido al usuario
create policy "customers_by_user_country_select"
on public.customers for select
to authenticated
using (exists (
 select 1 from public.user_allowed_country u
 where u.user_id = auth.uid() and u.country_code =
customers.country_code
));
create policy "customers_by_user_country_insert"
on public.customers for insert
to authenticated
with check (exists (
 select 1 from public.user_allowed_country u
 where u.user_id = auth.uid() and u.country_code =
customers.country_code
));
create policy "customers_by_user_country_update"
on public.customers for update
to authenticated
using (exists (
 select 1 from public.user_allowed_country u
 where u.user_id = auth.uid() and u.country_code =
customers.country_code
))
with check (exists (
 select 1 from public.user_allowed_country u
 where u.user_id = auth.uid() and u.country_code =
customers.country_code
));
create policy "customers_by_user_country_delete"
on public.customers for delete
to authenticated
using (exists (
 select 1 from public.user_allowed_country u
 where u.user_id = auth.uid() and u.country_code =
customers.country_code
));

-- invoices por país del cliente
create policy "invoices_by_user_country_select"
on public.invoices for select
to authenticated
using (exists (
 select 1
 from public.customers c
 join public.user_allowed_country u
 on u.country_code = c.country_code and u.user_id = auth.uid()
 where c.id = invoices.customer_id
));
create policy "invoices_by_user_country_insert"
on public.invoices for insert
to authenticated
with check (exists (
 select 1
 from public.customers c
 join public.user_allowed_country u
 on u.country_code = c.country_code and u.user_id = auth.uid()
 where c.id = invoices.customer_id
));
create policy "invoices_by_user_country_update"
on public.invoices for update
to authenticated
using (exists (
 select 1
 from public.customers c
 join public.user_allowed_country u
 on u.country_code = c.country_code and u.user_id = auth.uid()
 where c.id = invoices.customer_id
))
with check (exists (
 select 1
 from public.customers c
 join public.user_allowed_country u
 on u.country_code = c.country_code and u.user_id = auth.uid()
 where c.id = invoices.customer_id
));
create policy "invoices_by_user_country_delete"
on public.invoices for delete
to authenticated
using (exists (
 select 1
 from public.customers c
 join public.user_allowed_country u
 on u.country_code = c.country_code and u.user_id = auth.uid()
 where c.id = invoices.customer_id
));

-- RLS para invoice_lines basado en invoices y products
create policy "lines_by_country_and_category_select"
on public.invoice_lines for select
to authenticated
using (
 exists (
 select 1
 from public.invoices i
 join public.customers c on c.id = i.customer_id
 join public.user_allowed_country uc
 on uc.country_code = c.country_code and uc.user_id = auth.uid()
 where i.id = invoice_lines.invoice_id
 )
 and
 exists (
 select 1
 from public.products p
 join public.user_allowed_category ug
 on ug.category_id = p.category_id and ug.user_id = auth.uid()
 where p.id = invoice_lines.product_id
 )
);

create policy "lines_by_country_and_category_insert"
on public.invoice_lines for insert 
to authenticated
with check (
 exists (
 select 1
 from public.invoices i
 join public.customers c on c.id = i.customer_id
 join public.user_allowed_country uc
 on uc.country_code = c.country_code and uc.user_id = auth.uid()
 where i.id = invoice_lines.invoice_id
 )
 and
 exists (
 select 1
 from public.products p
 join public.user_allowed_category ug
 on ug.category_id = p.category_id and ug.user_id = auth.uid()
 where p.id = invoice_lines.product_id
 )
);

create policy "lines_by_country_and_category_update"
on public.invoice_lines for update
to authenticated
using (
 exists (
 select 1
 from public.invoices i
 join public.customers c on c.id = i.customer_id
 join public.user_allowed_country uc
 on uc.country_code = c.country_code and uc.user_id = auth.uid()
 where i.id = invoice_lines.invoice_id
 )
 and
 exists (
 select 1
 from public.products p
 join public.user_allowed_category ug
 on ug.category_id = p.category_id and ug.user_id = auth.uid()
 where p.id = invoice_lines.product_id
 )
)
with check (
 exists (
 select 1
 from public.invoices i
 join public.customers c on c.id = i.customer_id
 join public.user_allowed_country uc
 on uc.country_code = c.country_code and uc.user_id = auth.uid()
 where i.id = invoice_lines.invoice_id
 )
 and
 exists (
 select 1
 from public.products p
 join public.user_allowed_category ug
 on ug.category_id = p.category_id and ug.user_id = auth.uid()
 where p.id = invoice_lines.product_id
 )
);

create policy "lines_by_country_and_category_delete"
on public.invoice_lines for delete
to authenticated
using (
 exists (
 select 1
 from public.invoices i
 join public.customers c on c.id = i.customer_id
 join public.user_allowed_country uc
 on uc.country_code = c.country_code and uc.user_id = auth.uid()
 where i.id = invoice_lines.invoice_id
 )
 and
 exists (
 select 1
 from public.products p
 join public.user_allowed_category ug
 on ug.category_id = p.category_id and ug.user_id = auth.uid()
 where p.id = invoice_lines.product_id
 )
);

-- EXTRA 1: Funciones =======================================================================================================

-- EXTRA 2: Vistas =======================================================================================================
-- 1. Todas las sales
create or replace view public.v_sales_fact as
select 
    il.id as invoice_line_id,
    i.id as invoice_id,
    i.invoice_date,
    i.total_amount,
    c.id as customer_id,
    c.name as customer_name,
    c.country_code,
    co.name as country_name,
    p.id as product_id,
    p.name as product_name,
    cat.id as category_id,
    cat.name as category_name,
    il.quantity,
    il.unit_price,
    il.line_total
from invoice_lines il
join invoices i on il.invoice_id = i.id
join customers c on i.customer_id = c.id
join countries co on c.country_code = co.code
join products p on il.product_id = p.id
join categories cat on p.category_id = cat.id;

-- 2. Por categoria
create or replace view public.v_sales_by_category as
select 
    cat.id as category_id,
    cat.name as category_name,
    sum(il.line_total) as total_sales,
    count(distinct i.id) as total_invoices,
    sum(il.quantity) as total_units
from invoice_lines il
join invoices i on il.invoice_id = i.id
join products p on il.product_id = p.id
join categories cat on p.category_id = cat.id
group by cat.id, cat.name
order by total_sales desc;

-- 3. Por country
create or replace view public.v_sales_by_country as
select 
    co.code as country_code,
    co.name as country_name,
    sum(il.line_total) as total_sales,
    count(distinct i.id) as total_invoices,
    count(distinct c.id) as total_customers
from invoice_lines il
join invoices i on il.invoice_id = i.id
join customers c on i.customer_id = c.id
join countries co on c.country_code = co.code
group by co.code, co.name
order by total_sales desc;

-- Top 5 en los ultimos 30 dias
create or replace view public.v_top_products_30d as
select 
    p.id as product_id,
    p.name as product_name,
    cat.name as category_name,
    sum(il.quantity) as total_units_sold,
    sum(il.line_total) as total_sales
from invoice_lines il
join invoices i on il.invoice_id = i.id
join products p on il.product_id = p.id
join categories cat on p.category_id = cat.id
where i.invoice_date >= (current_date - interval '30 days')
group by p.id, p.name, cat.name
order by total_sales desc
limit 10;
